// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package employee is a generated GoMock package.
package employee

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	v1 "github.com/pd120424d/mountain-service/api/contracts/employee/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckActiveEmergencies mocks base method.
func (m *MockClient) CheckActiveEmergencies(ctx context.Context, employeeID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActiveEmergencies", ctx, employeeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActiveEmergencies indicates an expected call of CheckActiveEmergencies.
func (mr *MockClientMockRecorder) CheckActiveEmergencies(ctx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActiveEmergencies", reflect.TypeOf((*MockClient)(nil).CheckActiveEmergencies), ctx, employeeID)
}

// GetAllEmployees mocks base method.
func (m *MockClient) GetAllEmployees(ctx context.Context) ([]v1.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees", ctx)
	ret0, _ := ret[0].([]v1.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockClientMockRecorder) GetAllEmployees(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockClient)(nil).GetAllEmployees), ctx)
}

// GetEmployeeByID mocks base method.
func (m *MockClient) GetEmployeeByID(ctx context.Context, employeeID uint) (*v1.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", ctx, employeeID)
	ret0, _ := ret[0].(*v1.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockClientMockRecorder) GetEmployeeByID(ctx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockClient)(nil).GetEmployeeByID), ctx, employeeID)
}

// GetOnCallEmployees mocks base method.
func (m *MockClient) GetOnCallEmployees(ctx context.Context, shiftBuffer time.Duration) ([]v1.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnCallEmployees", ctx, shiftBuffer)
	ret0, _ := ret[0].([]v1.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnCallEmployees indicates an expected call of GetOnCallEmployees.
func (mr *MockClientMockRecorder) GetOnCallEmployees(ctx, shiftBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnCallEmployees", reflect.TypeOf((*MockClient)(nil).GetOnCallEmployees), ctx, shiftBuffer)
}

// MockhttpClient is a mock of httpClient interface.
type MockhttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockhttpClientMockRecorder
}

// MockhttpClientMockRecorder is the mock recorder for MockhttpClient.
type MockhttpClientMockRecorder struct {
	mock *MockhttpClient
}

// NewMockhttpClient creates a new mock instance.
func NewMockhttpClient(ctrl *gomock.Controller) *MockhttpClient {
	mock := &MockhttpClient{ctrl: ctrl}
	mock.recorder = &MockhttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpClient) EXPECT() *MockhttpClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockhttpClient) Get(ctx context.Context, endpoint string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, endpoint)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockhttpClientMockRecorder) Get(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockhttpClient)(nil).Get), ctx, endpoint)
}
