// Code generated by MockGen. DO NOT EDIT.
// Source: token_blacklist.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenBlacklist is a mock of TokenBlacklist interface.
type MockTokenBlacklist struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBlacklistMockRecorder
}

// MockTokenBlacklistMockRecorder is the mock recorder for MockTokenBlacklist.
type MockTokenBlacklistMockRecorder struct {
	mock *MockTokenBlacklist
}

// NewMockTokenBlacklist creates a new mock instance.
func NewMockTokenBlacklist(ctrl *gomock.Controller) *MockTokenBlacklist {
	mock := &MockTokenBlacklist{ctrl: ctrl}
	mock.recorder = &MockTokenBlacklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBlacklist) EXPECT() *MockTokenBlacklistMockRecorder {
	return m.recorder
}

// TestConnection mocks base method.
func (m *MockTokenBlacklist) TestConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockTokenBlacklistMockRecorder) TestConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockTokenBlacklist)(nil).TestConnection))
}

// BlacklistToken mocks base method.
func (m *MockTokenBlacklist) BlacklistToken(ctx context.Context, tokenID string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlacklistToken", ctx, tokenID, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlacklistToken indicates an expected call of BlacklistToken.
func (mr *MockTokenBlacklistMockRecorder) BlacklistToken(ctx, tokenID, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlacklistToken", reflect.TypeOf((*MockTokenBlacklist)(nil).BlacklistToken), ctx, tokenID, expiresAt)
}

// IsTokenBlacklisted mocks base method.
func (m *MockTokenBlacklist) IsTokenBlacklisted(ctx context.Context, tokenID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", ctx, tokenID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockTokenBlacklistMockRecorder) IsTokenBlacklisted(ctx, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockTokenBlacklist)(nil).IsTokenBlacklisted), ctx, tokenID)
}
