// Code generated by MockGen. DO NOT EDIT.
// Source: service_auth.go

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceAuth is a mock of ServiceAuth interface.
type MockServiceAuth struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAuthMockRecorder
}

// MockServiceAuthMockRecorder is the mock recorder for MockServiceAuth.
type MockServiceAuthMockRecorder struct {
	mock *MockServiceAuth
}

// NewMockServiceAuth creates a new mock instance.
func NewMockServiceAuth(ctrl *gomock.Controller) *MockServiceAuth {
	mock := &MockServiceAuth{ctrl: ctrl}
	mock.recorder = &MockServiceAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAuth) EXPECT() *MockServiceAuthMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockServiceAuth) GenerateToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockServiceAuthMockRecorder) GenerateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockServiceAuth)(nil).GenerateToken))
}

// GetAuthHeader mocks base method.
func (m *MockServiceAuth) GetAuthHeader() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthHeader")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthHeader indicates an expected call of GetAuthHeader.
func (mr *MockServiceAuthMockRecorder) GetAuthHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthHeader", reflect.TypeOf((*MockServiceAuth)(nil).GetAuthHeader))
}

// ValidateToken mocks base method.
func (m *MockServiceAuth) ValidateToken(tokenString string) (*ServiceClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*ServiceClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockServiceAuthMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockServiceAuth)(nil).ValidateToken), tokenString)
}

