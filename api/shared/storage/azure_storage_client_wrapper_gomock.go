// Code generated by MockGen. DO NOT EDIT.
// Source: azure_storage_client_wrapper.go
//
// Generated by this command:
//
//	mockgen -source=azure_storage_client_wrapper.go -destination=azure_storage_client_wrapper_gomock.go -package=storage -imports=gomock=go.uber.org/mock/gomock
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	io "io"
	reflect "reflect"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureBlobClientWrapper is a mock of AzureBlobClientWrapper interface.
type MockAzureBlobClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockAzureBlobClientWrapperMockRecorder
	isgomock struct{}
}

// MockAzureBlobClientWrapperMockRecorder is the mock recorder for MockAzureBlobClientWrapper.
type MockAzureBlobClientWrapperMockRecorder struct {
	mock *MockAzureBlobClientWrapper
}

// NewMockAzureBlobClientWrapper creates a new mock instance.
func NewMockAzureBlobClientWrapper(ctrl *gomock.Controller) *MockAzureBlobClientWrapper {
	mock := &MockAzureBlobClientWrapper{ctrl: ctrl}
	mock.recorder = &MockAzureBlobClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureBlobClientWrapper) EXPECT() *MockAzureBlobClientWrapperMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockAzureBlobClientWrapper) CreateContainer(ctx context.Context, options *azblob.CreateContainerOptions) (azblob.CreateContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, options)
	ret0, _ := ret[0].(azblob.CreateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockAzureBlobClientWrapperMockRecorder) CreateContainer(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockAzureBlobClientWrapper)(nil).CreateContainer), ctx, options)
}

// DeleteBlob mocks base method.
func (m *MockAzureBlobClientWrapper) DeleteBlob(ctx context.Context, blobName string, options *azblob.DeleteBlobOptions) (azblob.DeleteBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", ctx, blobName, options)
	ret0, _ := ret[0].(azblob.DeleteBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockAzureBlobClientWrapperMockRecorder) DeleteBlob(ctx, blobName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockAzureBlobClientWrapper)(nil).DeleteBlob), ctx, blobName, options)
}

// GetBlobURL mocks base method.
func (m *MockAzureBlobClientWrapper) GetBlobURL(blobName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobURL", blobName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBlobURL indicates an expected call of GetBlobURL.
func (mr *MockAzureBlobClientWrapperMockRecorder) GetBlobURL(blobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobURL", reflect.TypeOf((*MockAzureBlobClientWrapper)(nil).GetBlobURL), blobName)
}

// UploadStream mocks base method.
func (m *MockAzureBlobClientWrapper) UploadStream(ctx context.Context, blobName string, body io.Reader, options *azblob.UploadStreamOptions) (azblob.UploadStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStream", ctx, blobName, body, options)
	ret0, _ := ret[0].(azblob.UploadStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadStream indicates an expected call of UploadStream.
func (mr *MockAzureBlobClientWrapperMockRecorder) UploadStream(ctx, blobName, body, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStream", reflect.TypeOf((*MockAzureBlobClientWrapper)(nil).UploadStream), ctx, blobName, body, options)
}
