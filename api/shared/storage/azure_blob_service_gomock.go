// Code generated by MockGen. DO NOT EDIT.
// Source: azure_blob_service.go
//
// Generated by this command:
//
//	mockgen -source=azure_blob_service.go -destination=azure_blob_service_gomock.go -package=storage -imports=gomock=go.uber.org/mock/gomock
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	io "io"
	multipart "mime/multipart"
	reflect "reflect"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureBlobClient is a mock of AzureBlobClient interface.
type MockAzureBlobClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureBlobClientMockRecorder
	isgomock struct{}
}

// MockAzureBlobClientMockRecorder is the mock recorder for MockAzureBlobClient.
type MockAzureBlobClientMockRecorder struct {
	mock *MockAzureBlobClient
}

// NewMockAzureBlobClient creates a new mock instance.
func NewMockAzureBlobClient(ctrl *gomock.Controller) *MockAzureBlobClient {
	mock := &MockAzureBlobClient{ctrl: ctrl}
	mock.recorder = &MockAzureBlobClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureBlobClient) EXPECT() *MockAzureBlobClientMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockAzureBlobClient) CreateContainer(ctx context.Context, containerName string, options *azblob.CreateContainerOptions) (azblob.CreateContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, containerName, options)
	ret0, _ := ret[0].(azblob.CreateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockAzureBlobClientMockRecorder) CreateContainer(ctx, containerName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockAzureBlobClient)(nil).CreateContainer), ctx, containerName, options)
}

// DeleteBlob mocks base method.
func (m *MockAzureBlobClient) DeleteBlob(ctx context.Context, containerName, blobName string, options *azblob.DeleteBlobOptions) (azblob.DeleteBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", ctx, containerName, blobName, options)
	ret0, _ := ret[0].(azblob.DeleteBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockAzureBlobClientMockRecorder) DeleteBlob(ctx, containerName, blobName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockAzureBlobClient)(nil).DeleteBlob), ctx, containerName, blobName, options)
}

// UploadStream mocks base method.
func (m *MockAzureBlobClient) UploadStream(ctx context.Context, containerName, blobName string, body io.Reader, options *azblob.UploadStreamOptions) (azblob.UploadStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStream", ctx, containerName, blobName, body, options)
	ret0, _ := ret[0].(azblob.UploadStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadStream indicates an expected call of UploadStream.
func (mr *MockAzureBlobClientMockRecorder) UploadStream(ctx, containerName, blobName, body, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStream", reflect.TypeOf((*MockAzureBlobClient)(nil).UploadStream), ctx, containerName, blobName, body, options)
}

// MockAzureBlobService is a mock of AzureBlobService interface.
type MockAzureBlobService struct {
	ctrl     *gomock.Controller
	recorder *MockAzureBlobServiceMockRecorder
	isgomock struct{}
}

// MockAzureBlobServiceMockRecorder is the mock recorder for MockAzureBlobService.
type MockAzureBlobServiceMockRecorder struct {
	mock *MockAzureBlobService
}

// NewMockAzureBlobService creates a new mock instance.
func NewMockAzureBlobService(ctrl *gomock.Controller) *MockAzureBlobService {
	mock := &MockAzureBlobService{ctrl: ctrl}
	mock.recorder = &MockAzureBlobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureBlobService) EXPECT() *MockAzureBlobServiceMockRecorder {
	return m.recorder
}

// DeleteProfilePicture mocks base method.
func (m *MockAzureBlobService) DeleteProfilePicture(ctx context.Context, blobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePicture", ctx, blobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfilePicture indicates an expected call of DeleteProfilePicture.
func (mr *MockAzureBlobServiceMockRecorder) DeleteProfilePicture(ctx, blobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePicture", reflect.TypeOf((*MockAzureBlobService)(nil).DeleteProfilePicture), ctx, blobName)
}

// UploadProfilePicture mocks base method.
func (m *MockAzureBlobService) UploadProfilePicture(ctx context.Context, file multipart.File, header *multipart.FileHeader, employeeID uint) (*UploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfilePicture", ctx, file, header, employeeID)
	ret0, _ := ret[0].(*UploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProfilePicture indicates an expected call of UploadProfilePicture.
func (mr *MockAzureBlobServiceMockRecorder) UploadProfilePicture(ctx, file, header, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfilePicture", reflect.TypeOf((*MockAzureBlobService)(nil).UploadProfilePicture), ctx, file, header, employeeID)
}
