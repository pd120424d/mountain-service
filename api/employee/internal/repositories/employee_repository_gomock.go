// Code generated by MockGen. DO NOT EDIT.
// Source: employee_repository.go
//
// Generated by this command:
//
//	mockgen -source=employee_repository.go -destination=employee_repository_gomock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	model "github.com/pd120424d/mountain-service/api/employee/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmployeeRepository) Create(ctx context.Context, employee *model.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmployeeRepositoryMockRecorder) Create(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeeRepository)(nil).Create), ctx, employee)
}

// Delete mocks base method.
func (m *MockEmployeeRepository) Delete(ctx context.Context, employeeID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, employeeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeRepositoryMockRecorder) Delete(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeRepository)(nil).Delete), ctx, employeeID)
}

// GetAll mocks base method.
func (m *MockEmployeeRepository) GetAll(ctx context.Context) ([]model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEmployeeRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEmployeeRepository)(nil).GetAll), ctx)
}

// GetEmployeeByID mocks base method.
func (m *MockEmployeeRepository) GetEmployeeByID(ctx context.Context, id uint, employee *model.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", ctx, id, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeByID(ctx, id, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeByID), ctx, id, employee)
}

// GetEmployeeByUsername mocks base method.
func (m *MockEmployeeRepository) GetEmployeeByUsername(ctx context.Context, username string) (*model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByUsername", ctx, username)
	ret0, _ := ret[0].(*model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByUsername indicates an expected call of GetEmployeeByUsername.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeeByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByUsername", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeeByUsername), ctx, username)
}

// ListEmployees mocks base method.
func (m *MockEmployeeRepository) ListEmployees(ctx context.Context, filters map[string]interface{}) ([]model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", ctx, filters)
	ret0, _ := ret[0].([]model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockEmployeeRepositoryMockRecorder) ListEmployees(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockEmployeeRepository)(nil).ListEmployees), ctx, filters)
}

// ResetAllData mocks base method.
func (m *MockEmployeeRepository) ResetAllData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockEmployeeRepositoryMockRecorder) ResetAllData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockEmployeeRepository)(nil).ResetAllData), ctx)
}

// UpdateEmployee mocks base method.
func (m *MockEmployeeRepository) UpdateEmployee(ctx context.Context, employee *model.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockEmployeeRepositoryMockRecorder) UpdateEmployee(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockEmployeeRepository)(nil).UpdateEmployee), ctx, employee)
}
