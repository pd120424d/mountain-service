// Code generated by MockGen. DO NOT EDIT.
// Source: file_handler.go
//
// Generated by this command:
//
//	mockgen -source=file_handler.go -destination=file_handler_gomock.go -package=handler -imports=gomock=go.uber.org/mock/gomock
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
	isgomock struct{}
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// DeleteProfilePicture mocks base method.
func (m *MockFileHandler) DeleteProfilePicture(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProfilePicture", ctx)
}

// DeleteProfilePicture indicates an expected call of DeleteProfilePicture.
func (mr *MockFileHandlerMockRecorder) DeleteProfilePicture(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePicture", reflect.TypeOf((*MockFileHandler)(nil).DeleteProfilePicture), ctx)
}

// GetProfilePictureInfo mocks base method.
func (m *MockFileHandler) GetProfilePictureInfo(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProfilePictureInfo", ctx)
}

// GetProfilePictureInfo indicates an expected call of GetProfilePictureInfo.
func (mr *MockFileHandlerMockRecorder) GetProfilePictureInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePictureInfo", reflect.TypeOf((*MockFileHandler)(nil).GetProfilePictureInfo), ctx)
}

// UploadProfilePicture mocks base method.
func (m *MockFileHandler) UploadProfilePicture(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UploadProfilePicture", ctx)
}

// UploadProfilePicture indicates an expected call of UploadProfilePicture.
func (mr *MockFileHandlerMockRecorder) UploadProfilePicture(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfilePicture", reflect.TypeOf((*MockFileHandler)(nil).UploadProfilePicture), ctx)
}
