// Code generated by MockGen. DO NOT EDIT.
// Source: notification_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"
	time "time"

	model "github.com/pd120424d/mountain-service/api/urgency/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationRepository) Create(notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationRepositoryMockRecorder) Create(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationRepository)(nil).Create), notification)
}

// Delete mocks base method.
func (m *MockNotificationRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationRepository)(nil).Delete), id)
}

// GetByEmployeeID mocks base method.
func (m *MockNotificationRepository) GetByEmployeeID(employeeID uint) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmployeeID", employeeID)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmployeeID indicates an expected call of GetByEmployeeID.
func (mr *MockNotificationRepositoryMockRecorder) GetByEmployeeID(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmployeeID", reflect.TypeOf((*MockNotificationRepository)(nil).GetByEmployeeID), employeeID)
}

// GetByID mocks base method.
func (m *MockNotificationRepository) GetByID(id uint, notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotificationRepositoryMockRecorder) GetByID(id, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotificationRepository)(nil).GetByID), id, notification)
}

// GetByUrgencyID mocks base method.
func (m *MockNotificationRepository) GetByUrgencyID(urgencyID uint) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUrgencyID", urgencyID)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUrgencyID indicates an expected call of GetByUrgencyID.
func (mr *MockNotificationRepositoryMockRecorder) GetByUrgencyID(urgencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUrgencyID", reflect.TypeOf((*MockNotificationRepository)(nil).GetByUrgencyID), urgencyID)
}

// GetPendingNotifications mocks base method.
func (m *MockNotificationRepository) GetPendingNotifications(limit int) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNotifications", limit)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingNotifications indicates an expected call of GetPendingNotifications.
func (mr *MockNotificationRepositoryMockRecorder) GetPendingNotifications(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).GetPendingNotifications), limit)
}

// IncrementAttempts mocks base method.
func (m *MockNotificationRepository) IncrementAttempts(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementAttempts", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementAttempts indicates an expected call of IncrementAttempts.
func (mr *MockNotificationRepositoryMockRecorder) IncrementAttempts(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAttempts", reflect.TypeOf((*MockNotificationRepository)(nil).IncrementAttempts), id)
}

// MarkAsFailed mocks base method.
func (m *MockNotificationRepository) MarkAsFailed(id uint, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsFailed", id, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsFailed indicates an expected call of MarkAsFailed.
func (mr *MockNotificationRepositoryMockRecorder) MarkAsFailed(id, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsFailed", reflect.TypeOf((*MockNotificationRepository)(nil).MarkAsFailed), id, errorMessage)
}

// MarkAsSent mocks base method.
func (m *MockNotificationRepository) MarkAsSent(id uint, sentAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", id, sentAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockNotificationRepositoryMockRecorder) MarkAsSent(id, sentAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockNotificationRepository)(nil).MarkAsSent), id, sentAt)
}

// Update mocks base method.
func (m *MockNotificationRepository) Update(notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotificationRepositoryMockRecorder) Update(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationRepository)(nil).Update), notification)
}
