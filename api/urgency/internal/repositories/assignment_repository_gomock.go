// Code generated by MockGen. DO NOT EDIT.
// Source: assignment_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"

	model "github.com/pd120424d/mountain-service/api/urgency/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAssignmentRepository is a mock of AssignmentRepository interface.
type MockAssignmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssignmentRepositoryMockRecorder
}

// MockAssignmentRepositoryMockRecorder is the mock recorder for MockAssignmentRepository.
type MockAssignmentRepositoryMockRecorder struct {
	mock *MockAssignmentRepository
}

// NewMockAssignmentRepository creates a new mock instance.
func NewMockAssignmentRepository(ctrl *gomock.Controller) *MockAssignmentRepository {
	mock := &MockAssignmentRepository{ctrl: ctrl}
	mock.recorder = &MockAssignmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssignmentRepository) EXPECT() *MockAssignmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAssignmentRepository) Create(assignment *model.EmergencyAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAssignmentRepositoryMockRecorder) Create(assignment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssignmentRepository)(nil).Create), assignment)
}

// Delete mocks base method.
func (m *MockAssignmentRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAssignmentRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssignmentRepository)(nil).Delete), id)
}

// GetByEmployeeID mocks base method.
func (m *MockAssignmentRepository) GetByEmployeeID(employeeID uint) ([]model.EmergencyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmployeeID", employeeID)
	ret0, _ := ret[0].([]model.EmergencyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmployeeID indicates an expected call of GetByEmployeeID.
func (mr *MockAssignmentRepositoryMockRecorder) GetByEmployeeID(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmployeeID", reflect.TypeOf((*MockAssignmentRepository)(nil).GetByEmployeeID), employeeID)
}

// GetByID mocks base method.
func (m *MockAssignmentRepository) GetByID(id uint, assignment *model.EmergencyAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAssignmentRepositoryMockRecorder) GetByID(id, assignment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAssignmentRepository)(nil).GetByID), id, assignment)
}

// GetByUrgencyAndEmployee mocks base method.
func (m *MockAssignmentRepository) GetByUrgencyAndEmployee(urgencyID, employeeID uint) (*model.EmergencyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUrgencyAndEmployee", urgencyID, employeeID)
	ret0, _ := ret[0].(*model.EmergencyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUrgencyAndEmployee indicates an expected call of GetByUrgencyAndEmployee.
func (mr *MockAssignmentRepositoryMockRecorder) GetByUrgencyAndEmployee(urgencyID, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUrgencyAndEmployee", reflect.TypeOf((*MockAssignmentRepository)(nil).GetByUrgencyAndEmployee), urgencyID, employeeID)
}

// GetByUrgencyID mocks base method.
func (m *MockAssignmentRepository) GetByUrgencyID(urgencyID uint) ([]model.EmergencyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUrgencyID", urgencyID)
	ret0, _ := ret[0].([]model.EmergencyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUrgencyID indicates an expected call of GetByUrgencyID.
func (mr *MockAssignmentRepositoryMockRecorder) GetByUrgencyID(urgencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUrgencyID", reflect.TypeOf((*MockAssignmentRepository)(nil).GetByUrgencyID), urgencyID)
}

// GetPendingByEmployeeID mocks base method.
func (m *MockAssignmentRepository) GetPendingByEmployeeID(employeeID uint) ([]model.EmergencyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingByEmployeeID", employeeID)
	ret0, _ := ret[0].([]model.EmergencyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingByEmployeeID indicates an expected call of GetPendingByEmployeeID.
func (mr *MockAssignmentRepositoryMockRecorder) GetPendingByEmployeeID(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingByEmployeeID", reflect.TypeOf((*MockAssignmentRepository)(nil).GetPendingByEmployeeID), employeeID)
}

// Update mocks base method.
func (m *MockAssignmentRepository) Update(assignment *model.EmergencyAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAssignmentRepositoryMockRecorder) Update(assignment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAssignmentRepository)(nil).Update), assignment)
}
