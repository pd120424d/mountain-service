// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/urgency_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repositories/urgency_repository.go -destination=internal/repositories/mocks/urgency_repository_mock.go
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	model "github.com/pd120424d/mountain-service/api/urgency/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUrgencyRepository is a mock of UrgencyRepository interface.
type MockUrgencyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrgencyRepositoryMockRecorder
	isgomock struct{}
}

// MockUrgencyRepositoryMockRecorder is the mock recorder for MockUrgencyRepository.
type MockUrgencyRepositoryMockRecorder struct {
	mock *MockUrgencyRepository
}

// NewMockUrgencyRepository creates a new mock instance.
func NewMockUrgencyRepository(ctrl *gomock.Controller) *MockUrgencyRepository {
	mock := &MockUrgencyRepository{ctrl: ctrl}
	mock.recorder = &MockUrgencyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrgencyRepository) EXPECT() *MockUrgencyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrgencyRepository) Create(urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUrgencyRepositoryMockRecorder) Create(urgency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrgencyRepository)(nil).Create), urgency)
}

// Delete mocks base method.
func (m *MockUrgencyRepository) Delete(urgencyID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", urgencyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUrgencyRepositoryMockRecorder) Delete(urgencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUrgencyRepository)(nil).Delete), urgencyID)
}

// GetAll mocks base method.
func (m *MockUrgencyRepository) GetAll() ([]model.Urgency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Urgency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUrgencyRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUrgencyRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockUrgencyRepository) GetByID(id uint, urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUrgencyRepositoryMockRecorder) GetByID(id, urgency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUrgencyRepository)(nil).GetByID), id, urgency)
}

// List mocks base method.
func (m *MockUrgencyRepository) List(filters map[string]any) ([]model.Urgency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", filters)
	ret0, _ := ret[0].([]model.Urgency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUrgencyRepositoryMockRecorder) List(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUrgencyRepository)(nil).List), filters)
}

// ResetAllData mocks base method.
func (m *MockUrgencyRepository) ResetAllData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockUrgencyRepositoryMockRecorder) ResetAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockUrgencyRepository)(nil).ResetAllData))
}

// Update mocks base method.
func (m *MockUrgencyRepository) Update(urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUrgencyRepositoryMockRecorder) Update(urgency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUrgencyRepository)(nil).Update), urgency)
}
