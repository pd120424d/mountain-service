// Code generated by MockGen. DO NOT EDIT.
// Source: urgency_repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	model "github.com/pd120424d/mountain-service/api/urgency/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUrgencyRepository is a mock of UrgencyRepository interface.
type MockUrgencyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUrgencyRepositoryMockRecorder
}

// MockUrgencyRepositoryMockRecorder is the mock recorder for MockUrgencyRepository.
type MockUrgencyRepositoryMockRecorder struct {
	mock *MockUrgencyRepository
}

// NewMockUrgencyRepository creates a new mock instance.
func NewMockUrgencyRepository(ctrl *gomock.Controller) *MockUrgencyRepository {
	mock := &MockUrgencyRepository{ctrl: ctrl}
	mock.recorder = &MockUrgencyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrgencyRepository) EXPECT() *MockUrgencyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrgencyRepository) Create(ctx context.Context, urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUrgencyRepositoryMockRecorder) Create(ctx, urgency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrgencyRepository)(nil).Create), ctx, urgency)
}

// Delete mocks base method.
func (m *MockUrgencyRepository) Delete(ctx context.Context, urgencyID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, urgencyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUrgencyRepositoryMockRecorder) Delete(ctx, urgencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUrgencyRepository)(nil).Delete), ctx, urgencyID)
}

// GetAll mocks base method.
func (m *MockUrgencyRepository) GetAll(ctx context.Context) ([]model.Urgency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Urgency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUrgencyRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUrgencyRepository)(nil).GetAll), ctx)
}

// ListPaginated mocks base method.
func (m *MockUrgencyRepository) ListPaginated(ctx context.Context, page int, pageSize int) ([]model.Urgency, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginated", ctx, page, pageSize)
	ret0, _ := ret[0].([]model.Urgency)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaginated indicates an expected call of ListPaginated.
func (mr *MockUrgencyRepositoryMockRecorder) ListPaginated(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginated", reflect.TypeOf((*MockUrgencyRepository)(nil).ListPaginated), ctx, page, pageSize)
}

// GetByID mocks base method.
func (m *MockUrgencyRepository) GetByID(ctx context.Context, id uint, urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUrgencyRepositoryMockRecorder) GetByID(ctx, id, urgency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUrgencyRepository)(nil).GetByID), ctx, id, urgency)
}

// List mocks base method.
func (m *MockUrgencyRepository) List(ctx context.Context, filters map[string]interface{}) ([]model.Urgency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filters)
	ret0, _ := ret[0].([]model.Urgency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUrgencyRepositoryMockRecorder) List(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUrgencyRepository)(nil).List), ctx, filters)
}

// ResetAllData mocks base method.
func (m *MockUrgencyRepository) ResetAllData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockUrgencyRepositoryMockRecorder) ResetAllData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockUrgencyRepository)(nil).ResetAllData), ctx)
}

// Update mocks base method.
func (m *MockUrgencyRepository) Update(ctx context.Context, urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUrgencyRepositoryMockRecorder) Update(ctx, urgency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUrgencyRepository)(nil).Update), ctx, urgency)
}
