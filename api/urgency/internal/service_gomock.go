// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	urgencyV1 "github.com/pd120424d/mountain-service/api/contracts/urgency/v1"
	model "github.com/pd120424d/mountain-service/api/urgency/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUrgencyService is a mock of UrgencyService interface.
type MockUrgencyService struct {
	ctrl     *gomock.Controller
	recorder *MockUrgencyServiceMockRecorder
}

// MockUrgencyServiceMockRecorder is the mock recorder for MockUrgencyService.
type MockUrgencyServiceMockRecorder struct {
	mock *MockUrgencyService
}

// NewMockUrgencyService creates a new mock instance.
func NewMockUrgencyService(ctrl *gomock.Controller) *MockUrgencyService {
	mock := &MockUrgencyService{ctrl: ctrl}
	mock.recorder = &MockUrgencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrgencyService) EXPECT() *MockUrgencyServiceMockRecorder {
	return m.recorder
}

// CreateUrgency mocks base method.
func (m *MockUrgencyService) CreateUrgency(urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUrgency", urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUrgency indicates an expected call of CreateUrgency.
func (mr *MockUrgencyServiceMockRecorder) CreateUrgency(urgency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUrgency", reflect.TypeOf((*MockUrgencyService)(nil).CreateUrgency), urgency)
}

// DeleteUrgency mocks base method.
func (m *MockUrgencyService) DeleteUrgency(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUrgency", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUrgency indicates an expected call of DeleteUrgency.
func (mr *MockUrgencyServiceMockRecorder) DeleteUrgency(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrgency", reflect.TypeOf((*MockUrgencyService)(nil).DeleteUrgency), id)
}

// GetAllUrgencies mocks base method.
func (m *MockUrgencyService) GetAllUrgencies() ([]model.Urgency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUrgencies")
	ret0, _ := ret[0].([]model.Urgency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUrgencies indicates an expected call of GetAllUrgencies.
func (mr *MockUrgencyServiceMockRecorder) GetAllUrgencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUrgencies", reflect.TypeOf((*MockUrgencyService)(nil).GetAllUrgencies))
}

// GetUrgencyByID mocks base method.
func (m *MockUrgencyService) GetUrgencyByID(id uint) (*model.Urgency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrgencyByID", id)
	ret0, _ := ret[0].(*model.Urgency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrgencyByID indicates an expected call of GetUrgencyByID.
func (mr *MockUrgencyServiceMockRecorder) GetUrgencyByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrgencyByID", reflect.TypeOf((*MockUrgencyService)(nil).GetUrgencyByID), id)
}

// ResetAllData mocks base method.
func (m *MockUrgencyService) ResetAllData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockUrgencyServiceMockRecorder) ResetAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockUrgencyService)(nil).ResetAllData))
}

// UpdateUrgency mocks base method.
func (m *MockUrgencyService) UpdateUrgency(urgency *model.Urgency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUrgency", urgency)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUrgency indicates an expected call of UpdateUrgency.
func (mr *MockUrgencyServiceMockRecorder) UpdateUrgency(urgency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUrgency", reflect.TypeOf((*MockUrgencyService)(nil).UpdateUrgency), urgency)
}

// AssignUrgency mocks base method.
func (m *MockUrgencyService) AssignUrgency(urgencyID, employeeID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUrgency", urgencyID, employeeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUrgency indicates an expected call of AssignUrgency.
func (mr *MockUrgencyServiceMockRecorder) AssignUrgency(urgencyID, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUrgency", reflect.TypeOf((*MockUrgencyService)(nil).AssignUrgency), urgencyID, employeeID)
}

// UnassignUrgency mocks base method.
func (m *MockUrgencyService) UnassignUrgency(urgencyID uint, actorID uint, isAdmin bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignUrgency", urgencyID, actorID, isAdmin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignUrgency indicates an expected call of UnassignUrgency.
func (mr *MockUrgencyServiceMockRecorder) UnassignUrgency(urgencyID, actorID, isAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignUrgency", reflect.TypeOf((*MockUrgencyService)(nil).UnassignUrgency), urgencyID, actorID, isAdmin)
}

// GetAssignment mocks base method.
func (m *MockUrgencyService) GetAssignment(urgencyID uint) (*urgencyV1.AssignmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignment", urgencyID)
	ret0, _ := ret[0].(*urgencyV1.AssignmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignment indicates an expected call of GetAssignment.
func (mr *MockUrgencyServiceMockRecorder) GetAssignment(urgencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignment", reflect.TypeOf((*MockUrgencyService)(nil).GetAssignment), urgencyID)
}
