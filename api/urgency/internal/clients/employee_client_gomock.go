// Code generated by MockGen. DO NOT EDIT.
// Source: employee_client.go

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	v1 "github.com/pd120424d/mountain-service/api/contracts/employee/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHTTPClient) Delete(ctx context.Context, endpoint string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, endpoint)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPClientMockRecorder) Delete(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPClient)(nil).Delete), ctx, endpoint)
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, endpoint string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, endpoint)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, endpoint)
}

// Post mocks base method.
func (m *MockHTTPClient) Post(ctx context.Context, endpoint string, body interface{}) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, endpoint, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPClientMockRecorder) Post(ctx, endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), ctx, endpoint, body)
}

// Put mocks base method.
func (m *MockHTTPClient) Put(ctx context.Context, endpoint string, body interface{}) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, endpoint, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHTTPClientMockRecorder) Put(ctx, endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHTTPClient)(nil).Put), ctx, endpoint, body)
}

// MockEmployeeClient is a mock of EmployeeClient interface.
type MockEmployeeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeClientMockRecorder
}

// MockEmployeeClientMockRecorder is the mock recorder for MockEmployeeClient.
type MockEmployeeClientMockRecorder struct {
	mock *MockEmployeeClient
}

// NewMockEmployeeClient creates a new mock instance.
func NewMockEmployeeClient(ctrl *gomock.Controller) *MockEmployeeClient {
	mock := &MockEmployeeClient{ctrl: ctrl}
	mock.recorder = &MockEmployeeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeClient) EXPECT() *MockEmployeeClientMockRecorder {
	return m.recorder
}

// CheckActiveEmergencies mocks base method.
func (m *MockEmployeeClient) CheckActiveEmergencies(ctx context.Context, employeeID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActiveEmergencies", ctx, employeeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActiveEmergencies indicates an expected call of CheckActiveEmergencies.
func (mr *MockEmployeeClientMockRecorder) CheckActiveEmergencies(ctx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActiveEmergencies", reflect.TypeOf((*MockEmployeeClient)(nil).CheckActiveEmergencies), ctx, employeeID)
}

// GetAllEmployees mocks base method.
func (m *MockEmployeeClient) GetAllEmployees(ctx context.Context) ([]v1.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees", ctx)
	ret0, _ := ret[0].([]v1.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockEmployeeClientMockRecorder) GetAllEmployees(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockEmployeeClient)(nil).GetAllEmployees), ctx)
}

// GetEmployeeByID mocks base method.
func (m *MockEmployeeClient) GetEmployeeByID(ctx context.Context, employeeID uint) (*v1.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", ctx, employeeID)
	ret0, _ := ret[0].(*v1.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockEmployeeClientMockRecorder) GetEmployeeByID(ctx, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockEmployeeClient)(nil).GetEmployeeByID), ctx, employeeID)
}

// GetOnCallEmployees mocks base method.
func (m *MockEmployeeClient) GetOnCallEmployees(ctx context.Context, shiftBuffer time.Duration) ([]v1.EmployeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnCallEmployees", ctx, shiftBuffer)
	ret0, _ := ret[0].([]v1.EmployeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnCallEmployees indicates an expected call of GetOnCallEmployees.
func (mr *MockEmployeeClientMockRecorder) GetOnCallEmployees(ctx, shiftBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnCallEmployees", reflect.TypeOf((*MockEmployeeClient)(nil).GetOnCallEmployees), ctx, shiftBuffer)
}
