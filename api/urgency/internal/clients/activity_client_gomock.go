// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/activity_client.go
//
// Generated by this command:
//
//	mockgen -source=internal/clients/activity_client.go -destination=internal/clients/activity_client_gomock.go -package=clients
//

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	v1 "github.com/pd120424d/mountain-service/api/contracts/activity/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockActivityClient is a mock of ActivityClient interface.
type MockActivityClient struct {
	ctrl     *gomock.Controller
	recorder *MockActivityClientMockRecorder
	isgomock struct{}
}

// MockActivityClientMockRecorder is the mock recorder for MockActivityClient.
type MockActivityClientMockRecorder struct {
	mock *MockActivityClient
}

// NewMockActivityClient creates a new mock instance.
func NewMockActivityClient(ctrl *gomock.Controller) *MockActivityClient {
	mock := &MockActivityClient{ctrl: ctrl}
	mock.recorder = &MockActivityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityClient) EXPECT() *MockActivityClientMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockActivityClient) CreateActivity(ctx context.Context, req *v1.ActivityCreateRequest) (*v1.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", ctx, req)
	ret0, _ := ret[0].(*v1.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockActivityClientMockRecorder) CreateActivity(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockActivityClient)(nil).CreateActivity), ctx, req)
}

// GetActivitiesByUrgency mocks base method.
func (m *MockActivityClient) GetActivitiesByUrgency(ctx context.Context, urgencyID uint) ([]v1.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByUrgency", ctx, urgencyID)
	ret0, _ := ret[0].([]v1.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByUrgency indicates an expected call of GetActivitiesByUrgency.
func (mr *MockActivityClientMockRecorder) GetActivitiesByUrgency(ctx, urgencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByUrgency", reflect.TypeOf((*MockActivityClient)(nil).GetActivitiesByUrgency), ctx, urgencyID)
}

// LogActivity mocks base method.
func (m *MockActivityClient) LogActivity(ctx context.Context, level, description string, employeeID, urgencyID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogActivity", ctx, level, description, employeeID, urgencyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogActivity indicates an expected call of LogActivity.
func (mr *MockActivityClientMockRecorder) LogActivity(ctx, level, description, employeeID, urgencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogActivity", reflect.TypeOf((*MockActivityClient)(nil).LogActivity), ctx, level, description, employeeID, urgencyID)
}
