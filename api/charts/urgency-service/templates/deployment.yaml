apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "urgency-service.fullname" . }}
  labels:
    {{- include "urgency-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.strategy }}
  strategy:
    type: {{ default "RollingUpdate" .Values.strategy.type }}
    {{- if or (eq (default "RollingUpdate" .Values.strategy.type) "RollingUpdate") .Values.strategy.rollingUpdate }}
    rollingUpdate:
      {{- with .Values.strategy.rollingUpdate.maxSurge }}
      maxSurge: {{ . }}
      {{- end }}
      {{- with .Values.strategy.rollingUpdate.maxUnavailable }}
      maxUnavailable: {{ . }}
      {{- end }}
    {{- end }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "urgency-service.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "urgency-service.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app: urgency-service
    spec:
      volumes:
        - name: cloudsql-sa
          secret:
            secretName: {{ required "secrets.cloudSQLSA is required" .Values.secrets.cloudSQLSA }}

      containers:
        # App container
        - name: urgency
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DB_HOST
              value: {{ .Values.appEnv.DB_HOST | quote }}
            - name: DB_PORT
              value: {{ .Values.appEnv.DB_PORT | quote }}
            - name: DB_READ_HOST
              value: {{ .Values.appEnv.DB_READ_HOST | quote }}
            - name: DB_READ_PORT
              value: {{ .Values.appEnv.DB_READ_PORT | quote }}
            - name: DB_SSLMODE
              value: {{ .Values.appEnv.DB_SSLMODE | quote }}
            - name: REDIS_ADDR
              value: {{ .Values.appEnv.REDIS_ADDR | quote }}
            # Service-to-service auth secret (shared between the services)
            - name: JWT_SECRET
              valueFrom: {secretKeyRef: {name: app-shared, key: JWT_SECRET}}
            - name: SERVICE_AUTH_SECRET
              valueFrom: {secretKeyRef: {name: app-shared, key: SERVICE_AUTH_SECRET}}
            - name: EMPLOYEE_SERVICE_URL
              value: http://employee-service:8082
            # DB credentials via env
            - name: DB_USER
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbCommon }}, key: DB_USER}}
            - name: DB_PASSWORD
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_PASSWORD}}
            - name: DB_NAME
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_NAME}}
            - name: urgency_service_db
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_NAME}}
          ports:
            - containerPort: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

        # PgBouncer primary
        - name: pgbouncer-primary
          image: {{ .Values.pgbouncer.image }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.pgbouncer.ports.primary }}
              name: pgb-pri
          env:
            - name: DB_USER
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbCommon }}, key: DB_USER}}
            - name: DB_PASSWORD
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_PASSWORD}}
            - name: DB_NAME
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_NAME}}
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /tmp/pgbouncer
              printf "\"%s\" \"%s\"\n" "$DB_USER" "$DB_PASSWORD" > /tmp/pgbouncer/userlist.txt
              cat > /tmp/pgbouncer/pgbouncer.ini <<EOF
              [databases]
              ${DB_NAME}= host=127.0.0.1 port={{ .Values.pgbouncer.proxyPorts.primary }} dbname=${DB_NAME}
              [pgbouncer]
              listen_addr=127.0.0.1
              listen_port={{ .Values.pgbouncer.ports.primary }}
              pool_mode={{ .Values.pgbouncer.pool.pool_mode }}
              default_pool_size={{ .Values.pgbouncer.pool.default_pool_size }}
              min_pool_size={{ .Values.pgbouncer.pool.min_pool_size }}
              reserve_pool_size={{ .Values.pgbouncer.pool.reserve_pool_size }}
              auth_type={{ .Values.pgbouncer.pool.auth_type }}
              auth_file=/tmp/pgbouncer/userlist.txt
              logfile=/dev/stdout
              pidfile=/tmp/pgbouncer.pid
              EOF
              exec pgbouncer /tmp/pgbouncer/pgbouncer.ini

        # PgBouncer replica1
        - name: pgbouncer-replica1
          image: {{ .Values.pgbouncer.image }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.pgbouncer.ports.replica1 }}
              name: pgb-rep1
          env:
            - name: DB_USER
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbCommon }}, key: DB_USER}}
            - name: DB_PASSWORD
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_PASSWORD}}
            - name: DB_NAME
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_NAME}}
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /tmp/pgbouncer
              printf "\"%s\" \"%s\"\n" "$DB_USER" "$DB_PASSWORD" > /tmp/pgbouncer/userlist.txt
              cat > /tmp/pgbouncer/pgbouncer.ini <<EOF
              [databases]
              ${DB_NAME}= host=127.0.0.1 port={{ .Values.pgbouncer.proxyPorts.replica1 }} dbname=${DB_NAME}
              [pgbouncer]
              listen_addr=127.0.0.1
              listen_port={{ .Values.pgbouncer.ports.replica1 }}
              pool_mode={{ .Values.pgbouncer.pool.pool_mode }}
              default_pool_size={{ .Values.pgbouncer.pool.default_pool_size }}
              min_pool_size={{ .Values.pgbouncer.pool.min_pool_size }}
              reserve_pool_size={{ .Values.pgbouncer.pool.reserve_pool_size }}
              auth_type={{ .Values.pgbouncer.pool.auth_type }}
              auth_file=/tmp/pgbouncer/userlist.txt
              logfile=/dev/stdout
              pidfile=/tmp/pgbouncer.pid
              EOF
              exec pgbouncer /tmp/pgbouncer/pgbouncer.ini

        # PgBouncer replica2
        - name: pgbouncer-replica2
          image: {{ .Values.pgbouncer.image }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.pgbouncer.ports.replica2 }}
              name: pgb-rep2
          env:
            - name: DB_USER
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbCommon }}, key: DB_USER}}
            - name: DB_PASSWORD
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_PASSWORD}}
            - name: DB_NAME
              valueFrom: {secretKeyRef: {name: {{ .Values.secrets.dbService }}, key: DB_NAME}}
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eu
              mkdir -p /tmp/pgbouncer
              printf "\"%s\" \"%s\"\n" "$DB_USER" "$DB_PASSWORD" > /tmp/pgbouncer/userlist.txt
              cat > /tmp/pgbouncer/pgbouncer.ini <<EOF
              [databases]
              ${DB_NAME}= host=127.0.0.1 port={{ .Values.pgbouncer.proxyPorts.replica2 }} dbname=${DB_NAME}
              [pgbouncer]
              listen_addr=127.0.0.1
              listen_port={{ .Values.pgbouncer.ports.replica2 }}
              pool_mode={{ .Values.pgbouncer.pool.pool_mode }}
              default_pool_size={{ .Values.pgbouncer.pool.default_pool_size }}
              min_pool_size={{ .Values.pgbouncer.pool.min_pool_size }}
              reserve_pool_size={{ .Values.pgbouncer.pool.reserve_pool_size }}
              auth_type={{ .Values.pgbouncer.pool.auth_type }}
              auth_file=/tmp/pgbouncer/userlist.txt
              logfile=/dev/stdout
              pidfile=/tmp/pgbouncer.pid
              EOF
              exec pgbouncer /tmp/pgbouncer/pgbouncer.ini

        # Cloud SQL proxy primary
        - name: cloud-sql-proxy-primary
          image: {{ .Values.cloudSQL.image }}
          args:
            - "--credentials-file=/secrets/{{ required "secrets.cloudSQLSAKey is required" .Values.secrets.cloudSQLSAKey }}"
            - "--port={{ .Values.pgbouncer.proxyPorts.primary }}"
            - "$(CLOUDSQL_INSTANCE)"
          env:
            - name: CLOUDSQL_INSTANCE
              valueFrom:
                secretKeyRef:
                  {{- if .Values.cloudSQL.useAggregatedSecret }}
                  name: {{ required "secrets.instances is required when useAggregatedSecret=true" .Values.secrets.instances }}
                  key: {{ .Values.cloudSQL.primaryKey }}
                  {{- else }}
                  name: {{ required "secrets.cloudSQLPrimarySecret is required when useAggregatedSecret=false" .Values.secrets.cloudSQLPrimarySecret }}
                  key: {{ required "secrets.cloudSQLPrimaryKey is required when useAggregatedSecret=false" .Values.secrets.cloudSQLPrimaryKey }}
                  {{- end }}
          securityContext:
            runAsNonRoot: true
          volumeMounts:
            - name: cloudsql-sa
              mountPath: /secrets
              readOnly: true

        # Cloud SQL proxy replica1
        - name: cloud-sql-proxy-replica1
          image: {{ .Values.cloudSQL.image }}
          args:
            - "--credentials-file=/secrets/{{ required "secrets.cloudSQLSAKey is required" .Values.secrets.cloudSQLSAKey }}"
            - "--port={{ .Values.pgbouncer.proxyPorts.replica1 }}"
            - "$(CLOUDSQL_INSTANCE)"
          env:
            - name: CLOUDSQL_INSTANCE
              valueFrom:
                secretKeyRef:
                  {{- if .Values.cloudSQL.useAggregatedSecret }}
                  name: {{ required "secrets.instances is required when useAggregatedSecret=true" .Values.secrets.instances }}
                  key: {{ .Values.cloudSQL.replica1Key }}
                  {{- else }}
                  name: {{ required "secrets.cloudSQLReplica1Secret is required when useAggregatedSecret=false" .Values.secrets.cloudSQLReplica1Secret }}
                  key: {{ required "secrets.cloudSQLReplica1Key is required when useAggregatedSecret=false" .Values.secrets.cloudSQLReplica1Key }}
                  {{- end }}
          securityContext:
            runAsNonRoot: true
          volumeMounts:
            - name: cloudsql-sa
              mountPath: /secrets
              readOnly: true

        # Cloud SQL proxy replica2
        - name: cloud-sql-proxy-replica2
          image: {{ .Values.cloudSQL.image }}
          args:
            - "--credentials-file=/secrets/{{ required "secrets.cloudSQLSAKey is required" .Values.secrets.cloudSQLSAKey }}"
            - "--port={{ .Values.pgbouncer.proxyPorts.replica2 }}"
            - "$(CLOUDSQL_INSTANCE)"
          env:
            - name: CLOUDSQL_INSTANCE
              valueFrom:
                secretKeyRef:
                  {{- if .Values.cloudSQL.useAggregatedSecret }}
                  name: {{ required "secrets.instances is required when useAggregatedSecret=true" .Values.secrets.instances }}
                  key: {{ .Values.cloudSQL.replica2Key }}
                  {{- else }}
                  name: {{ required "secrets.cloudSQLReplica2Secret is required when useAggregatedSecret=false" .Values.secrets.cloudSQLReplica2Secret }}
                  key: {{ required "secrets.cloudSQLReplica2Key is required when useAggregatedSecret=false" .Values.secrets.cloudSQLReplica2Key }}
                  {{- end }}
          securityContext:
            runAsNonRoot: true
          volumeMounts:
            - name: cloudsql-sa
              mountPath: /secrets
              readOnly: true

