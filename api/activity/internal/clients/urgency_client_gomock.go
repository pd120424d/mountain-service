// Code generated by MockGen. DO NOT EDIT.
// Source: urgency_client.go
//
// Generated by this command:
//
//	mockgen -source=urgency_client.go -destination=urgency_client_gomock.go -package=clients mountain_service/activity/internal/clients -imports=gomock=go.uber.org/mock/gomock -typed
//

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	http "net/http"
	reflect "reflect"

	v1 "github.com/pd120424d/mountain-service/api/contracts/urgency/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUrgencyClient is a mock of UrgencyClient interface.
type MockUrgencyClient struct {
	ctrl     *gomock.Controller
	recorder *MockUrgencyClientMockRecorder
	isgomock struct{}
}

// MockUrgencyClientMockRecorder is the mock recorder for MockUrgencyClient.
type MockUrgencyClientMockRecorder struct {
	mock *MockUrgencyClient
}

// NewMockUrgencyClient creates a new mock instance.
func NewMockUrgencyClient(ctrl *gomock.Controller) *MockUrgencyClient {
	mock := &MockUrgencyClient{ctrl: ctrl}
	mock.recorder = &MockUrgencyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrgencyClient) EXPECT() *MockUrgencyClientMockRecorder {
	return m.recorder
}

// GetUrgencyByID mocks base method.
func (m *MockUrgencyClient) GetUrgencyByID(ctx context.Context, id uint) (*v1.UrgencyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrgencyByID", ctx, id)
	ret0, _ := ret[0].(*v1.UrgencyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrgencyByID indicates an expected call of GetUrgencyByID.
func (mr *MockUrgencyClientMockRecorder) GetUrgencyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrgencyByID", reflect.TypeOf((*MockUrgencyClient)(nil).GetUrgencyByID), ctx, id)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPClient) Get(ctx context.Context, endpoint string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, endpoint)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(ctx, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), ctx, endpoint)
}
