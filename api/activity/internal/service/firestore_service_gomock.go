// Code generated by MockGen. DO NOT EDIT.
// Source: firestore_service.go
//
// Generated by this command:
//
//	mockgen -source=firestore_service.go -destination=firestore_service_gomock.go -package=service mountain_service/activity/internal/service -imports=gomock=go.uber.org/mock/gomock -typed
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/pd120424d/mountain-service/api/shared/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFirestoreService is a mock of FirestoreService interface.
type MockFirestoreService struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreServiceMockRecorder
	isgomock struct{}
}

// MockFirestoreServiceMockRecorder is the mock recorder for MockFirestoreService.
type MockFirestoreServiceMockRecorder struct {
	mock *MockFirestoreService
}

// NewMockFirestoreService creates a new mock instance.
func NewMockFirestoreService(ctrl *gomock.Controller) *MockFirestoreService {
	mock := &MockFirestoreService{ctrl: ctrl}
	mock.recorder = &MockFirestoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreService) EXPECT() *MockFirestoreServiceMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockFirestoreService) ListAll(ctx context.Context, limit int) ([]models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, limit)
	ret0, _ := ret[0].([]models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockFirestoreServiceMockRecorder) ListAll(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockFirestoreService)(nil).ListAll), ctx, limit)
}

// ListByUrgency mocks base method.
func (m *MockFirestoreService) ListByUrgency(ctx context.Context, urgencyID uint, limit int) ([]models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUrgency", ctx, urgencyID, limit)
	ret0, _ := ret[0].([]models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUrgency indicates an expected call of ListByUrgency.
func (mr *MockFirestoreServiceMockRecorder) ListByUrgency(ctx, urgencyID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUrgency", reflect.TypeOf((*MockFirestoreService)(nil).ListByUrgency), ctx, urgencyID, limit)
}
