// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/activity_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/activity_service.go -destination=internal/service/activity_service_gomock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	v1 "github.com/pd120424d/mountain-service/api/contracts/activity/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockActivityService is a mock of ActivityService interface.
type MockActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityServiceMockRecorder
	isgomock struct{}
}

// MockActivityServiceMockRecorder is the mock recorder for MockActivityService.
type MockActivityServiceMockRecorder struct {
	mock *MockActivityService
}

// NewMockActivityService creates a new mock instance.
func NewMockActivityService(ctrl *gomock.Controller) *MockActivityService {
	mock := &MockActivityService{ctrl: ctrl}
	mock.recorder = &MockActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityService) EXPECT() *MockActivityServiceMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockActivityService) CreateActivity(ctx context.Context, req *v1.ActivityCreateRequest) (*v1.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", ctx, req)
	ret0, _ := ret[0].(*v1.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivitiesBatch mocks base method.
func (m *MockActivityService) CreateActivitiesBatch(ctx context.Context, items []v1.ActivityCreateRequest) ([]v1.BatchAddResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivitiesBatch", ctx, items)
	ret0, _ := ret[0].([]v1.BatchAddResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivitiesBatch indicates an expected call of CreateActivitiesBatch.
func (mr *MockActivityServiceMockRecorder) CreateActivitiesBatch(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivitiesBatch", reflect.TypeOf((*MockActivityService)(nil).CreateActivitiesBatch), ctx, items)
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockActivityServiceMockRecorder) CreateActivity(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockActivityService)(nil).CreateActivity), ctx, req)
}

// DeleteActivity mocks base method.
func (m *MockActivityService) DeleteActivity(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActivity indicates an expected call of DeleteActivity.
func (mr *MockActivityServiceMockRecorder) DeleteActivity(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockActivityService)(nil).DeleteActivity), ctx, id)
}

// GetActivityByID mocks base method.
func (m *MockActivityService) GetActivityByID(ctx context.Context, id uint) (*v1.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityByID", ctx, id)
	ret0, _ := ret[0].(*v1.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityByID indicates an expected call of GetActivityByID.
func (mr *MockActivityServiceMockRecorder) GetActivityByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityByID", reflect.TypeOf((*MockActivityService)(nil).GetActivityByID), ctx, id)
}

// ListActivities mocks base method.
func (m *MockActivityService) ListActivities(ctx context.Context, req *v1.ActivityListRequest) (*v1.ActivityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivities", ctx, req)
	ret0, _ := ret[0].(*v1.ActivityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivities indicates an expected call of ListActivities.
func (mr *MockActivityServiceMockRecorder) ListActivities(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivities", reflect.TypeOf((*MockActivityService)(nil).ListActivities), ctx, req)
}

// LogActivity mocks base method.
func (m *MockActivityService) LogActivity(ctx context.Context, description string, employeeID, urgencyID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogActivity", ctx, description, employeeID, urgencyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogActivity indicates an expected call of LogActivity.
func (mr *MockActivityServiceMockRecorder) LogActivity(ctx, description, employeeID, urgencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogActivity", reflect.TypeOf((*MockActivityService)(nil).LogActivity), ctx, description, employeeID, urgencyID)
}

// ResetAllData mocks base method.
func (m *MockActivityService) ResetAllData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockActivityServiceMockRecorder) ResetAllData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockActivityService)(nil).ResetAllData), ctx)
}
