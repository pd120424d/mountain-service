// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	v1 "github.com/pd120424d/mountain-service/api/contracts/activity/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockActivityService is a mock of ActivityService interface.
type MockActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityServiceMockRecorder
}

// MockActivityServiceMockRecorder is the mock recorder for MockActivityService.
type MockActivityServiceMockRecorder struct {
	mock *MockActivityService
}

// NewMockActivityService creates a new mock instance.
func NewMockActivityService(ctrl *gomock.Controller) *MockActivityService {
	mock := &MockActivityService{ctrl: ctrl}
	mock.recorder = &MockActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityService) EXPECT() *MockActivityServiceMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockActivityService) CreateActivity(req *v1.ActivityCreateRequest) (*v1.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", req)
	ret0, _ := ret[0].(*v1.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockActivityServiceMockRecorder) CreateActivity(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockActivityService)(nil).CreateActivity), req)
}

// DeleteActivity mocks base method.
func (m *MockActivityService) DeleteActivity(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActivity indicates an expected call of DeleteActivity.
func (mr *MockActivityServiceMockRecorder) DeleteActivity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockActivityService)(nil).DeleteActivity), id)
}

// GetActivityByID mocks base method.
func (m *MockActivityService) GetActivityByID(id uint) (*v1.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityByID", id)
	ret0, _ := ret[0].(*v1.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityByID indicates an expected call of GetActivityByID.
func (mr *MockActivityServiceMockRecorder) GetActivityByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityByID", reflect.TypeOf((*MockActivityService)(nil).GetActivityByID), id)
}

// GetActivityStats mocks base method.
func (m *MockActivityService) GetActivityStats() (*v1.ActivityStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityStats")
	ret0, _ := ret[0].(*v1.ActivityStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityStats indicates an expected call of GetActivityStats.
func (mr *MockActivityServiceMockRecorder) GetActivityStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityStats", reflect.TypeOf((*MockActivityService)(nil).GetActivityStats))
}

// ListActivities mocks base method.
func (m *MockActivityService) ListActivities(req *v1.ActivityListRequest) (*v1.ActivityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivities", req)
	ret0, _ := ret[0].(*v1.ActivityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivities indicates an expected call of ListActivities.
func (mr *MockActivityServiceMockRecorder) ListActivities(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivities", reflect.TypeOf((*MockActivityService)(nil).ListActivities), req)
}

// LogEmployeeActivity mocks base method.
func (m *MockActivityService) LogEmployeeActivity(activityType v1.ActivityType, level v1.ActivityLevel, title, description string, employeeID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogEmployeeActivity", activityType, level, title, description, employeeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogEmployeeActivity indicates an expected call of LogEmployeeActivity.
func (mr *MockActivityServiceMockRecorder) LogEmployeeActivity(activityType, level, title, description, employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEmployeeActivity", reflect.TypeOf((*MockActivityService)(nil).LogEmployeeActivity), activityType, level, title, description, employeeID)
}

// LogSystemActivity mocks base method.
func (m *MockActivityService) LogSystemActivity(activityType v1.ActivityType, level v1.ActivityLevel, title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSystemActivity", activityType, level, title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogSystemActivity indicates an expected call of LogSystemActivity.
func (mr *MockActivityServiceMockRecorder) LogSystemActivity(activityType, level, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSystemActivity", reflect.TypeOf((*MockActivityService)(nil).LogSystemActivity), activityType, level, title, description)
}

// LogUrgencyActivity mocks base method.
func (m *MockActivityService) LogUrgencyActivity(activityType v1.ActivityType, level v1.ActivityLevel, title, description string, urgencyID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogUrgencyActivity", activityType, level, title, description, urgencyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogUrgencyActivity indicates an expected call of LogUrgencyActivity.
func (mr *MockActivityServiceMockRecorder) LogUrgencyActivity(activityType, level, title, description, urgencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUrgencyActivity", reflect.TypeOf((*MockActivityService)(nil).LogUrgencyActivity), activityType, level, title, description, urgencyID)
}

// ResetAllData mocks base method.
func (m *MockActivityService) ResetAllData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockActivityServiceMockRecorder) ResetAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockActivityService)(nil).ResetAllData))
}
