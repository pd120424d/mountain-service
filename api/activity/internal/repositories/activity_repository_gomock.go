// Code generated by MockGen. DO NOT EDIT.
// Source: activity_repository.go
//
// Generated by this command:
//
//	mockgen -source=activity_repository.go -destination=activity_repository_gomock.go -package=repositories mountain_service/activity/internal/repositories -imports=gomock=go.uber.org/mock/gomock -typed
//

// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"

	model "github.com/pd120424d/mountain-service/api/activity/internal/model"
	v1 "github.com/pd120424d/mountain-service/api/contracts/activity/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockActivityRepository is a mock of ActivityRepository interface.
type MockActivityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActivityRepositoryMockRecorder
	isgomock struct{}
}

// MockActivityRepositoryMockRecorder is the mock recorder for MockActivityRepository.
type MockActivityRepositoryMockRecorder struct {
	mock *MockActivityRepository
}

// NewMockActivityRepository creates a new mock instance.
func NewMockActivityRepository(ctrl *gomock.Controller) *MockActivityRepository {
	mock := &MockActivityRepository{ctrl: ctrl}
	mock.recorder = &MockActivityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityRepository) EXPECT() *MockActivityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActivityRepository) Create(activity *model.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockActivityRepositoryMockRecorder) Create(activity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActivityRepository)(nil).Create), activity)
}

// CreateWithOutbox mocks base method.
func (m *MockActivityRepository) CreateWithOutbox(activity *model.Activity, eventData v1.ActivityEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithOutbox", activity, eventData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithOutbox indicates an expected call of CreateWithOutbox.
func (mr *MockActivityRepositoryMockRecorder) CreateWithOutbox(activity, eventData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithOutbox", reflect.TypeOf((*MockActivityRepository)(nil).CreateWithOutbox), activity, eventData)
}

// Delete mocks base method.
func (m *MockActivityRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActivityRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActivityRepository)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockActivityRepository) GetByID(id uint) (*model.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockActivityRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockActivityRepository)(nil).GetByID), id)
}

// GetStats mocks base method.
func (m *MockActivityRepository) GetStats() (*model.ActivityStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*model.ActivityStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockActivityRepositoryMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockActivityRepository)(nil).GetStats))
}

// List mocks base method.
func (m *MockActivityRepository) List(filter *model.ActivityFilter) ([]model.Activity, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", filter)
	ret0, _ := ret[0].([]model.Activity)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockActivityRepositoryMockRecorder) List(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockActivityRepository)(nil).List), filter)
}

// ResetAllData mocks base method.
func (m *MockActivityRepository) ResetAllData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAllData indicates an expected call of ResetAllData.
func (mr *MockActivityRepositoryMockRecorder) ResetAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllData", reflect.TypeOf((*MockActivityRepository)(nil).ResetAllData))
}
