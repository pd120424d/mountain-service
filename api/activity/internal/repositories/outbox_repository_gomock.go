// Code generated by MockGen. DO NOT EDIT.
// Source: outbox_repository.go
//
// Generated by this command:
//
//	mockgen -source=outbox_repository.go -destination=outbox_repository_gomock.go -package=repositories mountain_service/activity/internal/repositories -imports=gomock=go.uber.org/mock/gomock -typed
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/pd120424d/mountain-service/api/shared/models"
	gomock "go.uber.org/mock/gomock"
)

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// GetUnpublishedEvents mocks base method.
func (m *MockOutboxRepository) GetUnpublishedEvents(ctx context.Context, limit int) ([]*models.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpublishedEvents", ctx, limit)
	ret0, _ := ret[0].([]*models.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpublishedEvents indicates an expected call of GetUnpublishedEvents.
func (mr *MockOutboxRepositoryMockRecorder) GetUnpublishedEvents(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpublishedEvents", reflect.TypeOf((*MockOutboxRepository)(nil).GetUnpublishedEvents), ctx, limit)
}

// MarkAsPublished mocks base method.
func (m *MockOutboxRepository) MarkAsPublished(ctx context.Context, eventID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPublished", ctx, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsPublished indicates an expected call of MarkAsPublished.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsPublished(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPublished", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsPublished), ctx, eventID)
}

// MarkOutboxEventAsPublished mocks base method.
func (m *MockOutboxRepository) MarkOutboxEventAsPublished(ctx context.Context, event *models.OutboxEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkOutboxEventAsPublished", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkOutboxEventAsPublished indicates an expected call of MarkOutboxEventAsPublished.
func (mr *MockOutboxRepositoryMockRecorder) MarkOutboxEventAsPublished(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOutboxEventAsPublished", reflect.TypeOf((*MockOutboxRepository)(nil).MarkOutboxEventAsPublished), ctx, event)
}
