// Code generated by MockGen. DO NOT EDIT.
// Source: firebase_service.go
//
// Generated by this command:
//
//	mockgen -source=firebase_service.go -destination=firebase_service_gomock.go -package=service mountain_service/activity/internal/service -imports=gomock=go.uber.org/mock/gomock -typed
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	v1 "github.com/pd120424d/mountain-service/api/contracts/activity/v1"
	models "github.com/pd120424d/mountain-service/api/shared/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFirebaseService is a mock of FirebaseService interface.
type MockFirebaseService struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseServiceMockRecorder
	isgomock struct{}
}

// MockFirebaseServiceMockRecorder is the mock recorder for MockFirebaseService.
type MockFirebaseServiceMockRecorder struct {
	mock *MockFirebaseService
}

// NewMockFirebaseService creates a new mock instance.
func NewMockFirebaseService(ctrl *gomock.Controller) *MockFirebaseService {
	mock := &MockFirebaseService{ctrl: ctrl}
	mock.recorder = &MockFirebaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseService) EXPECT() *MockFirebaseServiceMockRecorder {
	return m.recorder
}

// GetActivitiesByUrgency mocks base method.
func (m *MockFirebaseService) GetActivitiesByUrgency(ctx context.Context, urgencyID uint) ([]*models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByUrgency", ctx, urgencyID)
	ret0, _ := ret[0].([]*models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByUrgency indicates an expected call of GetActivitiesByUrgency.
func (mr *MockFirebaseServiceMockRecorder) GetActivitiesByUrgency(ctx, urgencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByUrgency", reflect.TypeOf((*MockFirebaseService)(nil).GetActivitiesByUrgency), ctx, urgencyID)
}

// GetAllActivities mocks base method.
func (m *MockFirebaseService) GetAllActivities(ctx context.Context, limit int) ([]*models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActivities", ctx, limit)
	ret0, _ := ret[0].([]*models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActivities indicates an expected call of GetAllActivities.
func (mr *MockFirebaseServiceMockRecorder) GetAllActivities(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActivities", reflect.TypeOf((*MockFirebaseService)(nil).GetAllActivities), ctx, limit)
}

// HealthCheck mocks base method.
func (m *MockFirebaseService) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockFirebaseServiceMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockFirebaseService)(nil).HealthCheck), ctx)
}

// SyncActivity mocks base method.
func (m *MockFirebaseService) SyncActivity(ctx context.Context, eventData v1.ActivityEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncActivity", ctx, eventData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncActivity indicates an expected call of SyncActivity.
func (mr *MockFirebaseServiceMockRecorder) SyncActivity(ctx, eventData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncActivity", reflect.TypeOf((*MockFirebaseService)(nil).SyncActivity), ctx, eventData)
}
