// Code generated by MockGen. DO NOT EDIT.
// Source: sharded_dispatcher.go
//
// Generated by this command:
//
//	mockgen -source=sharded_dispatcher.go -destination=sharded_dispatcher_gomock.go -package=events github.com/pd120424d/mountain-service/api/activity-readmodel-updater/internal/event -imports=gomock=go.uber.org/mock/gomock -typed
//

// Package events is a generated GoMock package.
package events

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	gomock "go.uber.org/mock/gomock"
)

// MockShardedDispatcher is a mock of ShardedDispatcher interface.
type MockShardedDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockShardedDispatcherMockRecorder
	isgomock struct{}
}

// MockShardedDispatcherMockRecorder is the mock recorder for MockShardedDispatcher.
type MockShardedDispatcherMockRecorder struct {
	mock *MockShardedDispatcher
}

// NewMockShardedDispatcher creates a new mock instance.
func NewMockShardedDispatcher(ctrl *gomock.Controller) *MockShardedDispatcher {
	mock := &MockShardedDispatcher{ctrl: ctrl}
	mock.recorder = &MockShardedDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardedDispatcher) EXPECT() *MockShardedDispatcherMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockShardedDispatcher) Process(ctx context.Context, msg *pubsub.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockShardedDispatcherMockRecorder) Process(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockShardedDispatcher)(nil).Process), ctx, msg)
}
