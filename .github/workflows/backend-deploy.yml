name: Backend Deploy to Azure VM

on:
  workflow_run:
    workflows: ["backend-test-coverage"]
    types:
      - completed

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    # only run if the workflow_run was triggered by a push, not a pull_request
    if: github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'push'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: employee-service
            dockerfile: ./api/employee/Dockerfile
            context: ./api
            build_args: ""
          - name: urgency-service
            dockerfile: ./api/urgency/Dockerfile
            context: ./api
            build_args: ""
          - name: activity-service
            dockerfile: ./api/activity/Dockerfile
            context: ./api
            build_args: ""
          - name: version-service
            dockerfile: ./api/version-service/Dockerfile
            context: ./api
            build_args: "VERSION GIT_SHA"

    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      git_sha: ${{ steps.version.outputs.GIT_SHA }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Fetch full git history and tags
        run: |
          git fetch --tags --unshallow || git fetch --tags

      - name: Get Git tag and SHA
        id: version
        run: |
          echo "VERSION=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo dev)" >> $GITHUB_OUTPUT
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Docker image for ${{ matrix.service.name }}
        run: |
          if [ "${{ matrix.service.build_args }}" != "" ]; then
            docker build \
              -f ${{ matrix.service.dockerfile }} \
              -t ${{ matrix.service.name }}:latest \
              --build-arg VERSION=${{ steps.version.outputs.VERSION }} \
              --build-arg GIT_SHA=${{ steps.version.outputs.GIT_SHA }} \
              ${{ matrix.service.context }}
          else
            docker build \
              -f ${{ matrix.service.dockerfile }} \
              -t ${{ matrix.service.name }}:latest \
              ${{ matrix.service.context }}
          fi

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and Push ${{ matrix.service.name }} to GHCR
        run: |
          GHCR_IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ matrix.service.name }}"

          # Tag images
          docker tag ${{ matrix.service.name }}:latest ${GHCR_IMAGE_NAME}:latest
          docker tag ${{ matrix.service.name }}:latest ${GHCR_IMAGE_NAME}:${{ steps.version.outputs.VERSION }}

          # Push images
          docker push ${GHCR_IMAGE_NAME}:latest
          docker push ${GHCR_IMAGE_NAME}:${{ steps.version.outputs.VERSION }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Docker containers on Azure VM
        env:
          VERSION: ${{ needs.build-and-push.outputs.version }}
          SERVICES: "employee-service urgency-service activity-service version-service"
        run: |
          ssh -i ~/.ssh/github_actions ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} '
            set -e

            cd mountain-service

            echo "EMPLOYEE_SWAGGER_API_URL=${{ secrets.EMPLOYEE_SWAGGER_API_URL }}" > .env
            echo "URGENCY_SWAGGER_API_URL=${{ secrets.URGENCY_SWAGGER_API_URL }}" >> .env
            echo "ACTIVITY_SWAGGER_API_URL=${{ secrets.ACTIVITY_SWAGGER_API_URL }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=http://${{ secrets.AZURE_VM_HOST }}:9082" >> .env
            echo "EMPLOYEE_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/employee-service:'"$VERSION"'" >> .env
            echo "URGENCY_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/urgency-service:'"$VERSION"'" >> .env
            echo "ACTIVITY_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/activity-service:'"$VERSION"'" >> .env
            echo "VERSION_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/version-service:'"$VERSION"'" >> .env
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "SERVICE_AUTH_SECRET=${{ secrets.SERVICE_AUTH_SECRET }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            git pull origin main

            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull all images from GHCR
            for service in '"$SERVICES"'; do
              docker pull ghcr.io/${{ github.repository_owner }}/${service}:'"$VERSION"'
            done

            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d
          '
