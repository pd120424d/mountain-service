name: AWS Frontend Deploy

on:
  workflow_run:
    workflows: ["frontend-test-coverage"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild frontend image'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      git_sha: ${{ steps.version.outputs.GIT_SHA }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Fetch full git history and tags
      run: |
        git fetch --tags --unshallow || git fetch --tags

    - name: Get Git tag and SHA
      id: version
      run: |
        echo "VERSION=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo dev)" >> $GITHUB_OUTPUT
        echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-frontend:
    needs: get-version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || 
        (github.event_name == 'workflow_run' &&
         github.event.workflow_run.conclusion == 'success' &&
         github.event.workflow_run.event == 'push')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push Frontend image
      run: |
        NO_CACHE_FLAG=""
        if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
          NO_CACHE_FLAG="--no-cache"
        fi

        # Build frontend using production Dockerfile
        docker build -t frontend:latest -f ./ui/Dockerfile.production $NO_CACHE_FLAG ./ui

        # Tag and push
        GHCR_IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/frontend"
        docker tag frontend:latest ${GHCR_IMAGE_NAME}:latest
        docker tag frontend:latest ${GHCR_IMAGE_NAME}:${{ needs.get-version.outputs.version }}
        docker push ${GHCR_IMAGE_NAME}:latest
        docker push ${GHCR_IMAGE_NAME}:${{ needs.get-version.outputs.version }}

  deploy-frontend:
    needs: [get-version, build-frontend]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        # Use AWS-prefixed secrets
        echo "CLOUD_INSTANCE_IP=${{ secrets.AWS_INSTANCE_IP }}" >> $GITHUB_ENV
        echo "CLOUD_INSTANCE_USER=${{ secrets.AWS_INSTANCE_USER }}" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=ghcr.io/${{ github.repository_owner }}/frontend:${{ needs.get-version.outputs.version }}" >> $GITHUB_ENV

    - name: Create frontend deployment environment file
      run: |
        cat > .env.frontend << EOF
        # Frontend Deployment Configuration
        CLOUD_INSTANCE_IP=${{ env.CLOUD_INSTANCE_IP }}
        CLOUD_INSTANCE_USER=${{ env.CLOUD_INSTANCE_USER }}
        INSTANCE_IP=${{ env.CLOUD_INSTANCE_IP }}
        INSTANCE_USER=${{ env.CLOUD_INSTANCE_USER }}
        SSH_KEY_PATH=~/.ssh/deploy_key

        # Environment Configuration
        APP_ENV=production
        NODE_ENV=production

        # Frontend Configuration
        FRONTEND_HTTP_PORT=80
        FRONTEND_HTTPS_PORT=443
        SSL_CERT_PATH=/etc/nginx/ssl

        # Frontend Docker Image (dynamically set with actual version)
        FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}

        # GitHub Container Registry Authentication
        GHCR_PAT=${{ secrets.GHCR_PAT }}
        GITHUB_ACTOR=${{ github.actor }}
        EOF

        echo "Frontend deployment .env file created with image: ${{ env.FRONTEND_IMAGE }}"

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ env.CLOUD_INSTANCE_IP }} >> ~/.ssh/known_hosts

    - name: Deploy frontend to AWS
      run: |
        export SSH_KEY_CONTENT="${{ secrets.AWS_SSH_PRIVATE_KEY }}"
        export SSH_KEY_PATH="~/.ssh/deploy_key"
        export GHCR_PAT="${{ secrets.GHCR_PAT }}"
        export GITHUB_ACTOR="${{ github.actor }}"

        # Make deployment script executable
        chmod +x ./deploy-frontend.sh

        # Run frontend deployment using the dynamically created .env.frontend file
        ./deploy-frontend.sh .env.frontend

    - name: Verify frontend deployment
      run: |
        echo "Waiting for frontend to start..."
        sleep 15

        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color

        echo "🔍 Testing frontend deployment..."

        # Test frontend health
        echo -n "Testing frontend health endpoint... "
        if curl -f -s http://${{ env.CLOUD_INSTANCE_IP }}/health > /dev/null 2>&1; then
          echo -e "${GREEN}✅ PASSED${NC}"
        else
          echo -e "${RED}❌ FAILED${NC}"
          echo -e "${YELLOW}⚠️  WARNING: Frontend health check failed${NC}"
        fi

        # Test frontend is serving the app
        echo -n "Testing frontend application... "
        if curl -f -s http://${{ env.CLOUD_INSTANCE_IP }}/ > /dev/null 2>&1; then
          echo -e "${GREEN}✅ PASSED${NC}"
        else
          echo -e "${RED}❌ FAILED${NC}"
          echo -e "${YELLOW}⚠️  WARNING: Frontend application check failed${NC}"
        fi

        echo -e "${GREEN}✅ Frontend deployment verification completed!${NC}"

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key
        rm -f .env.frontend

    - name: Frontend Deployment Summary
      run: |
        echo "## Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Platform**: AWS" >> $GITHUB_STEP_SUMMARY
        echo "- **Instance**: ${{ env.CLOUD_INSTANCE_USER }}@${{ env.CLOUD_INSTANCE_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL**: http://${{ env.CLOUD_INSTANCE_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: ${{ env.FRONTEND_IMAGE }}" >> $GITHUB_STEP_SUMMARY
