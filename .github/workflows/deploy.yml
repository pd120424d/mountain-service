name: Deploy to Azure VM

on:
  push:
    branches:
      - main
    tags:
    - 'v*'

env:
  REGISTRY: ghcr.io
  VERSION_IMAGE_NAME: version-service
  GHCR_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/version-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get Git tag and SHA
      id: version
      run: |
        echo "VERSION=$(git describe --tags --abbrev=0 || echo dev)" >> $GITHUB_OUTPUT
        echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build Docker images
      run: |
        docker build -t frontend:latest -f ./ui/Dockerfile ./ui
        docker build -t employee-service:latest -f ./api/employee/Dockerfile ./api
        docker build -t version-service:latest \
          --build-arg VERSION=${{ steps.version.outputs.VERSION }} \
          --build-arg GIT_SHA=${{ steps.version.outputs.GIT_SHA }} \
          -f ./api/version-service/Dockerfile ./api/version-service

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Tag and Push version-service image
      run: |
        docker tag version-service:latest ghcr.io/${{ github.repository_owner }}/version-service:${{ steps.version.outputs.VERSION }}
        docker push ghcr.io/${{ github.repository_owner }}/version-service:${{ steps.version.outputs.VERSION }}

    - name: Save Docker images as tarballs
      run: |
        docker save frontend:latest > frontend.tar
        docker save employee-service:latest > employee.tar

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" > ~/.ssh/github_actions
        chmod 600 ~/.ssh/github_actions
        ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

    - name: Test SSH Connection
      run: |
        ssh -i ~/.ssh/github_actions -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "echo connected successfully"

    - name: Copy Docker images to Azure VM
      run: |
        scp -i ~/.ssh/github_actions frontend.tar employee.tar ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:~

    - name: Load and run Docker containers on Azure VM
      run: |
        ssh -i ~/.ssh/github_actions ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} '
          set -e

          docker load < ~/frontend.tar
          docker load < ~/employee.tar
          rm ~/frontend.tar ~/employee.tar

          cd mountain-service

          # Injecting the secret as environment variable
          echo "SWAGGER_API_URL=${{ secrets.SWAGGER_API_URL }}" > .env
          echo "CORS_ALLOWED_ORIGINS=http://${{ secrets.AZURE_VM_HOST }}:9082" >> .env
          echo "VERSION_SERVICE_IMAGE=ghcr.io/${{ github.repository_owner }}/version-service:${{ steps.version.outputs.VERSION }}" >> .env

          git pull origin main

          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          docker pull $(grep VERSION_SERVICE_IMAGE .env | cut -d "=" -f2)

          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d
        '
